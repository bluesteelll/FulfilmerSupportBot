from aiogram.filters import CommandStart, Command
from aiogram.types import Message, CallbackQuery, FSInputFile
from aiogram import Router, F, Bot
from aiogram.fsm.context import FSMContext
from core.states import StatesContext
from core.markups import choose_service_markup, finish_markup
from fast_bitrix24 import Bitrix
from data.config import BITRIX_WEBHOOK

router = Router()
bx = Bitrix(webhook=BITRIX_WEBHOOK)


@router.message(CommandStart())
async def cmd_start(message: Message, state: FSMContext):
    await message.answer(
        text='ü§ù–î–∞–≤–∞–π—Ç–µ –ø–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è, –∫–∞–∫ —è –º–æ–≥—É –∫ –≤–∞–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è ?')

    await state.set_state(StatesContext.enter_name_data)


@router.message(StatesContext.enter_name_data)
async def handle_enter_name_data(message: Message, state: FSMContext):
    await message.answer(text=f'‚úÖ–û—Ç–ª–∏—á–Ω–æ, {message.text}.\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ—Ç–æ—Ä–æ–µ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç',
                         reply_markup=choose_service_markup)
    await state.update_data(name=message.text)
    await state.set_state(StatesContext.choose_service)


@router.callback_query(F.data == 'fulfillment_start')
async def callback_fulfillment_start(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        text="‚úçÔ∏è–£–∫–∞–∂–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏ –∫–æ–ª-–≤–æ —Ç–æ–≤–∞—Ä–∞ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.")
    await state.update_data(service='–§–§')
    await state.set_state(StatesContext.item_count)


@router.message(StatesContext.item_count)
async def callback_fulfillment_start(message: Message, state: FSMContext):
    await message.answer(
        text="‚òéÔ∏è –û—Å—Ç–∞–≤—å—Ç–µ —Å–≤–æ–∏ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, —á—Ç–æ–±—ã —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ.\n–ù–∞—à —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è")
    await state.update_data(item_count=message.text)
    await state.set_state(StatesContext.enter_contact_data_bitrix)


@router.message(StatesContext.enter_contact_data_bitrix)
async def callback_enter_name_data_bitrix(message: Message, state: FSMContext):
    await state.update_data(contact=message.text)
    await state.set_state(StatesContext.final)
    await _finish(message, await state.get_data())


@router.callback_query(F.data == 'china_start')
async def callback_fulfillment_start(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        text="‚úçÔ∏è–£–∫–∞–∂–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏ –∫–æ–ª-–≤–æ —Ç–æ–≤–∞—Ä–∞ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.")
    await state.update_data(service='–∫–∏—Ç–∞–π')
    await state.set_state(StatesContext.item_count)


@router.message(StatesContext.item_count)
async def callback_fulfillment_start(message: Message, state: FSMContext):
    await message.answer(
        text="‚òéÔ∏è –û—Å—Ç–∞–≤—å—Ç–µ —Å–≤–æ–∏ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, —á—Ç–æ–±—ã —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ.\n–ù–∞—à —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è")
    await state.update_data(item_count=message.text)
    await state.set_state(StatesContext.enter_contact_data_bitrix)


@router.message(StatesContext.enter_contact_data_china)
async def callback_enter_name_data_china(message: Message, state: FSMContext):
    await state.update_data(contact=message.text)
    await state.set_state(StatesContext.final)
    await _finish(message, await state.get_data())


async def _finish(message: Message, data):
    await message.answer(
        text='‚úàÔ∏è–ó–∞—è–≤–∫–∞ –Ω–∞ —Ä–∞—Å—á–µ—Ç —É–∂–µ —É –º–µ–Ω–µ–¥–∂–µ—Ä–∞!\n–ê –ø–æ–∫–∞ –≤—ã –æ–∂–∏–¥–∞–µ—Ç–µ –∑–≤–æ–Ω–æ–∫, –º–æ–∂–µ—Ç–µ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—Å—è —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –Ω–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏')
    await message.answer_document(document=FSInputFile(r'data/Fulfilmer ‚Äì –û –Ω–∞—Å.pdf'))
    if data['service'] == '–§–§':
        await message.answer_document(document=FSInputFile(r'data/Fulfilmer ‚Äì –ü—Ä–∞–∏ÃÜ—Å.pdf'))
    await bx.call('crm.lead.add',
                  {
                      'fields': {
                          'TITLE': f'{data['name']} ‚Äî —Ç–≥-–±–æ—Ç ({data['service']})',
                          'NAME': data['name'],
                          "PHONE": [{"VALUE": data['contact']}],
                          'COMMENTS': data['item_count']}
                  })


@router.message(F.text.lower().regexp(
    r'(.*–ø—Ä–∞–π—Å*.)|(.*—Ü–µ–Ω–∞*.)|(.*—Å–∫–æ–ª—å–∫–æ*.)|(.*–¥–æ—Å—Ç–∞–≤–∫–∞*.)|(.*–∫–∏—Ç–∞*.)|(.*—Ñ—É–ª—Ñ–∏–ª–º–µ–Ω—Ç*.)|(.*–æ—Ç–≥—Ä—É–∑–∫–∞*.)|(.*–ø–æ—Å—Ç–∞–≤–∫–∞*.)|(.*—É—Å–ª–æ–≤–∏—è*.)|(.*—É—Å–ª—É–≥–∏*.)|(.*—É–∑–Ω–∞—Ç—å*.)|(.*–º–æ–∂–Ω–æ*.)|(.*–∑–∞–∫–∞–∑–∞—Ç—å*.)|(.*—é–∞–Ω*.)|(.*–ø–æ–∏—Å–∫*.)|(.*–î–æ–±—Ä—ã–π*.)|(.*—Ç–æ–≤–∞—Ä*.)|(.*—Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤*.)'))
async def chat_reply(message: Message, state: FSMContext):
    await message.reply(
        text='–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ üëã\n–ù–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —É—Å–ª–æ–≤–∏—è –∏ –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–∞–π—Å:\n@fulfilmer_support_bot')
