from aiogram.filters import CommandStart, Command
from aiogram.types import Message, CallbackQuery, FSInputFile
from aiogram import Router, F, Bot
from aiogram.fsm.context import FSMContext
from core.states import StatesContext
from core.markups import choose_service_markup, finish_markup
from fast_bitrix24 import Bitrix
from data.config import BITRIX_WEBHOOK

router = Router()
bx = Bitrix(webhook=BITRIX_WEBHOOK)


@router.message(CommandStart())
async def cmd_start(message: Message, state: FSMContext):
    await message.answer(
        text='–ö–æ–º–∞–Ω–¥–∞ FulFilmer –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –í–∞—Å!\n–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –±–æ—Ç–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ —Å –Ω–∞—à–µ–π '
             '–∫–æ–º–ø–∞–Ω–∏–µ–π.\n–í –Ω–∞—á–∞–ª–µ –Ω–∞–ø–∏—à–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –í–∞—à–µ –ø–æ–ª–Ω–æ–µ –∏–º—è')

    await state.set_state(StatesContext.enter_name_data)


@router.message(StatesContext.enter_name_data)
async def handle_enter_name_data(message: Message, state: FSMContext):
    await message.answer(text='–û—Ç–ª–∏—á–Ω–æ!\n–¢–µ–ø–µ—Ä—å –í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–±—Ä–∞—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é —É—Å–ª—É–≥—É',
                         reply_markup=choose_service_markup)
    await state.update_data(name=message.text)
    await state.set_state(StatesContext.choose_service)


@router.callback_query(F.data == 'fulfillment_start')
async def callback_fulfillment_start(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        text="–í–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç —Ñ—É–ª—Ñ–∏–ª–º–µ–Ω—Ç\b–û—Å—Ç–∞–≤—å—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –≤–∞—à–∏ —Ä–∞–±–æ—á–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã, —á—Ç–æ–±—ã –Ω–∞—à "
             "–º–µ–Ω–µ–¥–∂–µ—Ä —É—Ç–æ—á–Ω–∏–ª –≤—Å–µ –¥–µ—Ç–∞–ª–∏")
    await state.update_data(service='fulfillment')
    await state.set_state(StatesContext.enter_contact_data_bitrix)


@router.message(StatesContext.enter_contact_data_bitrix)
async def callback_enter_name_data_bitrix(message: Message, state: FSMContext):
    await message.answer(text='–í—Å–µ –ø–æ—á—Ç–∏ –≥–æ—Ç–æ–≤–æ\n–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–û—Ç–ø—Ä–∞–≤–∏—Ç—å", –ª–∏–±–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –≤—ã '
                              '—Ö–æ—Ç–∏—Ç–µ —á—Ç–æ-–ª–∏–±–æ —É—Ç–æ—á–Ω–∏—Ç—å —Å—Ä–∞–∑—É',
                         reply_markup=finish_markup)
    await state.update_data(contact=message.text)
    await state.set_state(StatesContext.final)


@router.callback_query(F.data == 'china_start')
async def callback_china_start(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        text="–í–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –¥–æ—Å—Ç–∞–≤–∫–∞ –∏–∑ –ö–∏—Ç–∞—è\b–û—Å—Ç–∞–≤—å—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –≤–∞—à–∏ —Ä–∞–±–æ—á–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã, —á—Ç–æ–±—ã –Ω–∞—à "
             "–º–µ–Ω–µ–¥–∂–µ—Ä —É—Ç–æ—á–Ω–∏–ª –≤—Å–µ –¥–µ—Ç–∞–ª–∏")
    await state.update_data(service='china')
    await state.set_state(StatesContext.enter_contact_data_china)


@router.message(StatesContext.enter_contact_data_china)
async def callback_enter_name_data_china(message: Message, state: FSMContext):
    await message.answer(text='–í—Å–µ –ø–æ—á—Ç–∏ –≥–æ—Ç–æ–≤–æ\n–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–û—Ç–ø—Ä–∞–≤–∏—Ç—å", –ª–∏–±–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –≤—ã '
                              '—Ö–æ—Ç–∏—Ç–µ —á—Ç–æ-–ª–∏–±–æ —É—Ç–æ—á–Ω–∏—Ç—å —Å—Ä–∞–∑—É',
                         reply_markup=finish_markup)
    await state.update_data(contact=message.text)
    await state.set_state(StatesContext.final)


@router.callback_query(F.data == 'finish', StatesContext.final)
async def callback_final(callback: CallbackQuery, state: FSMContext):
    await state.update_data(comment='No comment')
    await _finish(callback.message, await state.get_data())
    await state.set_state(StatesContext.done)


@router.message(StatesContext.final)
async def callback_finish(message: Message, state: FSMContext):
    await state.update_data(comment=message.text)
    await _finish(message, await state.get_data())
    await state.set_state(StatesContext.done)


async def _finish(message: Message, data):
    await message.answer(text='–í—Å–µ –≥–æ—Ç–æ–≤–æ\n–í–∞—à –∑–∞–ø—Ä–æ—Å —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω\n–°–µ–π—á–∞—Å –≤–∞–º –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã PDF —Ñ–∞–π–ª—ã '
                              '–¥–ª—è –ø—Ä–µ–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–∑–Ω–∞–∫–æ–º–ª–µ–Ω–∏—è\n–ù–∞–¥–µ–µ–º—Å—è –Ω–∞ –±–ª–∞–≥–æ—Ç–≤–æ—Ä–Ω–æ–µ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ!')
    await message.answer_document(document=FSInputFile('data/–§—É–ª—Ñ–∏–ª–º–µ–Ω—Ç –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞.pdf'))
    if data['service'] == 'fulfillment':
        await message.answer_document(document=FSInputFile('data/–ü—Ä–∞–π—Å.pdf'))
    print(data)
    await bx.call('tasks.task.add',
                  {
                      'fields': {
                          'TITLE': f'–ó–∞–ø—Ä–æ—Å –∫–ª–∏–µ–Ω—Ç–∞ {data['name']}',
                          'DESCRIPTION': f'–ò–º—è:\t{data['name']}\n–£—Å–ª—É–≥–∞:\t{data['service']}\n–ö–æ–Ω—Ç–∞–∫—Ç—ã:\t{data['contact']}\n'
                                         f'–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:\t{data['comment']}',
                          'CREATED_BY': 1,
                          'RESPONSIBLE_ID': 1
                      }
                  })


@router.message(F.text.lower().regexp(r'(.*–ø—Ä–∞–π—Å*.)|(.*—Ü–µ–Ω–∞*.)|(.*—Å–∫–æ–ª—å–∫–æ*.)|(.*–¥–æ—Å—Ç–∞–≤–∫–∞*.)|(.*–∫–∏—Ç–∞*.)|(.*—Ñ—É–ª—Ñ–∏–ª–º–µ–Ω—Ç*.)|(.*–æ—Ç–≥—Ä—É–∑–∫–∞*.)|(.*–ø–æ—Å—Ç–∞–≤–∫–∞*.)|(.*—É—Å–ª–æ–≤–∏—è*.)|(.*—É—Å–ª—É–≥–∏*.)|(.*—É–∑–Ω–∞—Ç—å*.)|(.*–º–æ–∂–Ω–æ*.)|(.*–∑–∞–∫–∞–∑–∞—Ç—å*.)|(.*—é–∞–Ω*.)|(.*–ø–æ–∏—Å–∫*.)|(.*–î–æ–±—Ä—ã–π*.)|(.*—Ç–æ–≤–∞—Ä*.)|(.*—Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤*.)'))
async def cmd_start(message: Message, state: FSMContext):
    await message.reply(
        text='–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ üëã\n–ù–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —É—Å–ª–æ–≤–∏—è –∏ –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–∞–π—Å:\n@fulfilmer_support_bot')
